package com.example.malwaredetectionapp

import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.DateRange
import androidx.compose.material.icons.filled.Home
import androidx.compose.material.icons.filled.Person
import androidx.compose.material.icons.filled.Search
import androidx.compose.material.icons.rounded.Search
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.colorResource
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import androidx.navigation.compose.*
import com.example.malwaredetectionapp.ui.theme.MalwareDetectionAppTheme


class DashboardActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MalwareDetectionAppTheme {
                DashboardScreen()
            }
        }
    }
}

data class BottomNavItem(val label: String, val icon: androidx.compose.ui.graphics.vector.ImageVector, val route: String)

val bottomNavItems = listOf(
    BottomNavItem("Dashboard", Icons.Default.Home, "dashboard"),
    BottomNavItem("Scan", Icons.Default.Search, "scan"),
    BottomNavItem("Profile", Icons.Default.Person, "profile")
)

@Preview
@Composable
fun DashboardScreenPreview() {
    DashboardContentScreen()
}

@Composable
fun DashboardScreen(navController: NavHostController = rememberNavController()) {
    var selectedItem by remember { mutableIntStateOf(0) }

    Scaffold(
        bottomBar = {
            NavigationBar (
                containerColor = colorResource(id = R.color.bottom_navigation),
            ) {
                bottomNavItems.forEachIndexed { index, item ->
                    NavigationBarItem(
                        icon = { Icon(item.icon, contentDescription = item.label) },
                        label = { Text(item.label) },
                        selected = selectedItem == index,
                        onClick = {
                            selectedItem = index
                            navController.navigate(item.route) {
                                popUpTo(navController.graph.startDestinationId) { saveState = true }
                                launchSingleTop = true
                                restoreState = true
                            }
                        },
                        colors = NavigationBarItemDefaults.colors(
                            selectedIconColor = Color.White,
                            unselectedIconColor = Color.White,
                            selectedTextColor = Color.White,
                            unselectedTextColor = Color.White,
                            indicatorColor = colorResource(id = R.color.black)
                        )
                    )
                }
            }
        },
        modifier = Modifier.fillMaxSize()
    ) { innerPadding ->
        NavHost(
            navController = navController,
            startDestination = "dashboard",
            modifier = Modifier.padding(innerPadding)
        ) {
            composable("dashboard") { DashboardContentScreen() }
            composable("scan") { ScanContentScreen() }
            composable("profile") { ProfileContentScreen() }
        }
    }
}

@Composable
fun DashboardContentScreen() {
    var searching by remember { mutableStateOf("") }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
            .background(colorResource(id = R.color.background))
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Row (
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Image(
                painter = painterResource(id = R.drawable.logo),
                contentDescription = "Logo",
                modifier = Modifier.size(80.dp)
            )
            Spacer(modifier = Modifier.weight(1f))
            Box{
                Column(
                    horizontalAlignment = Alignment.End
                ) {
                    Text("Username", fontSize = 16.sp, color = Color.White)
                    Text("Logout", color = colorResource(id = R.color.text_color))
                }
            }
            Spacer(modifier = Modifier.width(10.dp))
            Image(
                painter = painterResource(id = R.drawable.avatar),
                contentDescription = "Avatar",
                modifier = Modifier
                    .size(80.dp)
                    .clip(CircleShape)
                    .border(
                        width = 2.dp,
                        color = Color.White,
                        shape = CircleShape
                    )
            )
        }
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(
                    start = 20.dp,
                    end = 20.dp,
                    top = 40.dp,
                    bottom = 30.dp
                ),
            verticalAlignment = Alignment.CenterVertically
        ) {
            TextField(
                value = searching,
                onValueChange = { searching = it },
                placeholder = { Text("Search...", fontSize = 14.sp) },
                modifier = Modifier
                    .weight(1f)
                    .height(48.dp)
                    .background(
                        color = colorResource(id = R.color.white),
                        shape = RoundedCornerShape(10.dp)
                    ),
                colors = OutlinedTextFieldDefaults.colors(
                    focusedTextColor = colorResource(id = R.color.black),
                    unfocusedTextColor = colorResource(id = R.color.black),
                    cursorColor = colorResource(id = R.color.black),
                    focusedLabelColor = Color.Gray,
                    unfocusedLabelColor = Color.Gray,
                    focusedBorderColor = Color.Transparent,
                    unfocusedBorderColor = Color.Transparent
                ),
                textStyle = LocalTextStyle.current.copy(fontSize = 14.sp),
                singleLine = true
            )

            Spacer(modifier = Modifier.width(10.dp))

            IconButton(
                onClick = { /* Search */ },
                modifier = Modifier
                    .size(44.dp) // Nhỏ hơn 60dp
                    .border(
                        width = 2.dp,
                        color = colorResource(id = R.color.white),
                        shape = CircleShape
                    ),
                colors = IconButtonDefaults.iconButtonColors(
                    containerColor = colorResource(id = R.color.background),
                    contentColor = colorResource(id = R.color.white)
                )
            ) {
                Icon(
                    imageVector = Icons.Rounded.Search,
                    contentDescription = "Search",
                    tint = Color.White,
                    modifier = Modifier.size(24.dp) // Nhỏ hơn 40dp
                )
            }
        }

        Row {
            Text("Currently", color = Color.White, fontSize = 14.sp, fontWeight = FontWeight.Bold)
            Spacer(modifier = Modifier.weight(1f))
            Text("Sort by", color = Color.White, fontSize = 14.sp, fontWeight = FontWeight.Bold)
        }
        HorizontalDivider(
            color = Color.White,             // Màu của đường gạch
            thickness = 1.dp,               // Độ dày của đường gạch
            modifier = Modifier
                .fillMaxWidth()
                .padding(
                    top= 5.dp,
                    bottom = 10.dp
                )
        )
        Row (
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Image(
                painter = painterResource(id = R.drawable.benign),
                contentDescription = "Benign",
                modifier = Modifier.size(50.dp)
            )
            Spacer(modifier = Modifier.width(7.dp))
            Box{
                Column(
                    horizontalAlignment = Alignment.Start
                ) {
                    Text("Name: malware_sample_01", fontSize = 12.sp, color = Color.White)
                    Text("Type: Adware",  fontSize = 12.sp, color = Color.White)
                    Text("Last scan: 14/05/2025",  fontSize = 12.sp, color = Color.White)
                }
            }

        }

    }
}

@Composable
fun ScanContentScreen() {
    var searching by remember { mutableStateOf("") }
    val context = LocalContext.current
    Box (
        Modifier
            .fillMaxSize()
            .background(colorResource(id = R.color.background))
            .padding(top = 75.dp),
        contentAlignment = Alignment.Center
    ){
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 16.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            Image(
                painter = painterResource(id = R.drawable.logo),
                contentDescription = "Logo",
                modifier = Modifier.size(100.dp)
            )
            Spacer(modifier = Modifier.height(100.dp))
            OutlinedTextField(
                value = searching,
                onValueChange = {}, // Không cho chỉnh sửa nội dung
                label = {
                    if (searching.isEmpty()) {
                        Text("APK File", fontSize = 18.sp)
                    }
                },            modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp)
                    .defaultMinSize(minHeight = 50.dp)
                    .background(
                        color = colorResource(id = R.color.white),
                        shape = RoundedCornerShape(12.dp)
                    ),
                colors = OutlinedTextFieldDefaults.colors(
                    disabledTextColor = colorResource(id = R.color.black),
                    disabledLabelColor = Color.Gray,
                    disabledBorderColor = Color.Transparent,
                    disabledContainerColor = Color.Transparent
                ),
                enabled = false, // Không cho chỉnh sửa
                singleLine = true,
                textStyle = LocalTextStyle.current.copy(fontSize = 20.sp)
            )
            Spacer(modifier = Modifier.height(10.dp))
            Row (
                modifier = Modifier
                    .fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Button(
                    onClick = {
                        // Giả lập chọn file, cập nhật nội dung
                        searching = "malware_sample_01malware_sample_01malware_sample_01.apk"
                    },
                    modifier = Modifier
                        .padding(16.dp)
                        .border(
                            width = 3.dp,
                            color = colorResource(id = R.color.white),
                            shape = RoundedCornerShape(8.dp)
                        ),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = colorResource(id = R.color.background),
                        contentColor = colorResource(id = R.color.white)
                    ),
                    shape = RoundedCornerShape(8.dp)
                ) {
                    Text("Upload File", fontSize = 20.sp, color = colorResource(id = R.color.white))
                }
                Spacer(modifier = Modifier.weight(1f))
                Button(
                    onClick = {
                        context.startActivity(Intent(context, AnalyzerActivity::class.java))
                    },
                    modifier = Modifier
                        .padding(16.dp)
                        .background(
                            color = colorResource(id = R.color.text_color),
                            shape = RoundedCornerShape(8.dp)
                        )
                        .border(
                            width = 3.dp,
                            color = colorResource(id = R.color.white),
                            shape = RoundedCornerShape(8.dp)
                        ),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color.Transparent, // tránh chồng màu
                        contentColor = colorResource(id = R.color.white)
                    ),
                    shape = RoundedCornerShape(8.dp)
                ) {
                    Text("Scan", fontSize = 20.sp)
                }
            }
            Spacer(modifier = Modifier.weight(0.5f))
        }
    }
}

@Composable
fun ProfileContentScreen() {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
            .background(colorResource(id = R.color.background))
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text("Profile Screen")
    }
}