package com.example.malwaredetectionapp

import android.content.Context
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.provider.OpenableColumns
import android.util.Log
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.compose.setContent
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Home
import androidx.compose.material.icons.filled.Person
import androidx.compose.material.icons.filled.Search
import androidx.compose.material.icons.rounded.Search
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.colorResource
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import androidx.navigation.compose.*
import com.example.malwaredetectionapp.network.ContextHolder
import com.example.malwaredetectionapp.network.RetrofitClient
import com.example.malwaredetectionapp.ui.theme.MalwareDetectionAppTheme
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.MultipartBody
import okhttp3.RequestBody.Companion.toRequestBody


class DashboardActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        ContextHolder.context = this // Set context for com.example.malwaredetectionapp.network.CustomTrustManager
        setContent {
            MalwareDetectionAppTheme {
                DashboardScreen()
            }
        }

    }
}

data class BottomNavItem(val label: String, val icon: androidx.compose.ui.graphics.vector.ImageVector, val route: String)

val bottomNavItems = listOf(
    BottomNavItem("Dashboard", Icons.Default.Home, "dashboard"),
    BottomNavItem("Scan", Icons.Default.Search, "scan"),
    BottomNavItem("Profile", Icons.Default.Person, "profile")
)

@Preview
@Composable
fun DashboardScreenPreview() {
    ScanContentScreen()
}

@Composable
fun DashboardScreen(navController: NavHostController = rememberNavController()) {
    var selectedItem by remember { mutableIntStateOf(0) }

    Scaffold(
        bottomBar = {
            NavigationBar (
                containerColor = colorResource(id = R.color.bottom_navigation),
            ) {
                bottomNavItems.forEachIndexed { index, item ->
                    NavigationBarItem(
                        icon = { Icon(item.icon, contentDescription = item.label) },
                        label = { Text(item.label) },
                        selected = selectedItem == index,
                        onClick = {
                            selectedItem = index
                            navController.navigate(item.route) {
                                popUpTo(navController.graph.startDestinationId) { saveState = true }
                                launchSingleTop = true
                                restoreState = true
                            }
                        },
                        colors = NavigationBarItemDefaults.colors(
                            selectedIconColor = Color.White,
                            unselectedIconColor = Color.White,
                            selectedTextColor = Color.White,
                            unselectedTextColor = Color.White,
                            indicatorColor = colorResource(id = R.color.black)
                        )
                    )
                }
            }
        },
        modifier = Modifier.fillMaxSize()
    ) { innerPadding ->
        NavHost(
            navController = navController,
            startDestination = "dashboard",
            modifier = Modifier.padding(innerPadding)
        ) {
            composable("dashboard") { DashboardContentScreen() }
            composable("scan") {
                ScanContentScreen()
            }
            composable("profile") { ProfileContentScreen() }
        }
    }
}

@Composable
fun DashboardContentScreen() {
    var searching by remember { mutableStateOf("") }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
            .background(colorResource(id = R.color.background))
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Row (
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Image(
                painter = painterResource(id = R.drawable.logo),
                contentDescription = "Logo",
                modifier = Modifier.size(80.dp)
            )
            Spacer(modifier = Modifier.weight(1f))
            Box{
                Column(
                    horizontalAlignment = Alignment.End
                ) {
                    Text("Username", fontSize = 16.sp, color = Color.White)
                    Text("Logout", color = colorResource(id = R.color.text_color))
                }
            }
            Spacer(modifier = Modifier.width(10.dp))
            Image(
                painter = painterResource(id = R.drawable.avatar),
                contentDescription = "Avatar",
                modifier = Modifier
                    .size(80.dp)
                    .clip(CircleShape)
                    .border(
                        width = 2.dp,
                        color = Color.White,
                        shape = CircleShape
                    )
            )
        }
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(
                    start = 20.dp,
                    end = 20.dp,
                    top = 40.dp,
                    bottom = 30.dp
                ),
            verticalAlignment = Alignment.CenterVertically
        ) {
            TextField(
                value = searching,
                onValueChange = { searching = it },
                placeholder = { Text("Search...", fontSize = 14.sp) },
                modifier = Modifier
                    .weight(1f)
                    .height(48.dp)
                    .background(
                        color = colorResource(id = R.color.white),
                        shape = RoundedCornerShape(10.dp)
                    ),
                colors = OutlinedTextFieldDefaults.colors(
                    focusedTextColor = colorResource(id = R.color.black),
                    unfocusedTextColor = colorResource(id = R.color.black),
                    cursorColor = colorResource(id = R.color.black),
                    focusedLabelColor = Color.Gray,
                    unfocusedLabelColor = Color.Gray,
                    focusedBorderColor = Color.Transparent,
                    unfocusedBorderColor = Color.Transparent
                ),
                textStyle = LocalTextStyle.current.copy(fontSize = 14.sp),
                singleLine = true
            )

            Spacer(modifier = Modifier.width(10.dp))

            IconButton(
                onClick = { /* Search */ },
                modifier = Modifier
                    .size(44.dp) // Nhỏ hơn 60dp
                    .border(
                        width = 2.dp,
                        color = colorResource(id = R.color.white),
                        shape = CircleShape
                    ),
                colors = IconButtonDefaults.iconButtonColors(
                    containerColor = colorResource(id = R.color.background),
                    contentColor = colorResource(id = R.color.white)
                )
            ) {
                Icon(
                    imageVector = Icons.Rounded.Search,
                    contentDescription = "Search",
                    tint = Color.White,
                    modifier = Modifier.size(24.dp) // Nhỏ hơn 40dp
                )
            }
        }

        Row {
            Text("Currently", color = Color.White, fontSize = 14.sp, fontWeight = FontWeight.Bold)
            Spacer(modifier = Modifier.weight(1f))
            Text("Sort by", color = Color.White, fontSize = 14.sp, fontWeight = FontWeight.Bold)
        }
        HorizontalDivider(
            color = Color.White,             // Màu của đường gạch
            thickness = 1.dp,               // Độ dày của đường gạch
            modifier = Modifier
                .fillMaxWidth()
                .padding(
                    top= 5.dp,
                    bottom = 10.dp
                )
        )
        Row (
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Image(
                painter = painterResource(id = R.drawable.benign),
                contentDescription = "Benign",
                modifier = Modifier.size(50.dp)
            )
            Spacer(modifier = Modifier.width(7.dp))
            Box{
                Column(
                    horizontalAlignment = Alignment.Start
                ) {
                    Text("Name: malware_sample_01", fontSize = 12.sp, color = Color.White)
                    Text("Type: Adware",  fontSize = 12.sp, color = Color.White)
                    Text("Last scan: 14/05/2025",  fontSize = 12.sp, color = Color.White)
                }
            }

        }

    }
}

@Composable
fun ScanContentScreen() {
    var searching by remember { mutableStateOf("") }
    var selectedUri by remember { mutableStateOf<Uri?>(null) } // lưu trữ Uri của file đã chọn
    var uploadStatus by remember { mutableStateOf<String?>(null) } // To show upload status
    val context = LocalContext.current

    val sharedPref = context.getSharedPreferences("auth", Context.MODE_PRIVATE)
    val userId = sharedPref.getInt("user_id", -1).toString()

    // Tạo trình chọn tệp (file picker) APK
    val apkLauncher = rememberLauncherForActivityResult(ActivityResultContracts.GetContent())  { uri: Uri? ->
        if (uri != null){
            val fileName = context.contentResolver.query(uri, null, null, null, null)?.use { cursor ->
                val nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
                cursor.moveToFirst()
                cursor.getString(nameIndex)
            } ?: "Unknow file"
            searching = fileName
            selectedUri = uri
        }
    }
    // Khởi tạo một coroutineScope để quản lý các nhiệm vụ chạy ngầm, tránh thực hiện task nặng
    // trực tiếp trên luồng chính.
    // coroutineScope này sẽ tự động được ghi nhớ và tái sử dụng mỗi khi màn hình được vẽ lại.
    // coroutineScope sẽ tự động dọn dẹp (hủy bỏ) tất cả các nhiệm vụ đang chạy bên trong nó khi
    // màn hình (Composable) đó không còn cần thiết nữa.
    val coroutineScope = rememberCoroutineScope()
    // Giao diện Scan
    Box (
        Modifier
            .fillMaxSize()
            .background(colorResource(id = R.color.background))
            .padding(top = 75.dp),
        contentAlignment = Alignment.Center
    ){
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 16.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            Image(
                painter = painterResource(id = R.drawable.logo),
                contentDescription = "Logo",
                modifier = Modifier.size(100.dp)
            )
            Spacer(modifier = Modifier.height(100.dp))
            OutlinedTextField(
                value = searching,
                onValueChange = {}, // Không cho chỉnh sửa nội dung
                label = {
                    if (searching.isEmpty()) {
                        Text("APK File", fontSize = 18.sp)
                    }
                },            modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp)
                    .defaultMinSize(minHeight = 50.dp)
                    .background(
                        color = colorResource(id = R.color.white),
                        shape = RoundedCornerShape(12.dp)
                    ),
                colors = OutlinedTextFieldDefaults.colors(
                    disabledTextColor = colorResource(id = R.color.black),
                    disabledLabelColor = Color.Gray,
                    disabledBorderColor = Color.Transparent,
                    disabledContainerColor = Color.Transparent
                ),
                enabled = false, // Không cho chỉnh sửa
                singleLine = true,
                textStyle = LocalTextStyle.current.copy(fontSize = 20.sp)
            )
            Spacer(modifier = Modifier.height(10.dp))
            Row (
                modifier = Modifier
                    .fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Button(
                    onClick = {
                        apkLauncher.launch("application/vnd.android.package-archive")
                    },
                    modifier = Modifier
                        .padding(16.dp)
                        .border(
                            width = 3.dp,
                            color = colorResource(id = R.color.white),
                            shape = RoundedCornerShape(8.dp)
                        ),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = colorResource(id = R.color.background),
                        contentColor = colorResource(id = R.color.white)
                    ),
                    shape = RoundedCornerShape(8.dp)
                ) {
                    Text("Choose File", fontSize = 20.sp, color = colorResource(id = R.color.white))
                }
                Spacer(modifier = Modifier.weight(1f))
                Button(
                    onClick = {
                        if (selectedUri != null){
                            // Khởi chạy một Coroutine để thực hiện tác vụ mạng
                            coroutineScope.launch {
                                try {
                                    // Lấy InputStream từ Uri đã chọn
                                    // InputStream cho phép đọc dữ liệu byte theo byte từ tệp, bất kể tệp đó nằm ở đâu
                                    val inputStream = context.contentResolver.openInputStream(selectedUri!!)
                                    if (inputStream == null) {
                                        uploadStatus = "Error: Could not read APK file"
                                        return@launch
                                    }
                                    // Chuyển đổi mảng ByteArray thành một đối tượng RequestBody
                                    // Đọc toàn bộ nội dung của InputStream thành một mảng ByteArray khi và chỉ khi
                                    // InputStream không phải là null (?)
                                    val requestBody = inputStream.readBytes().toRequestBody("application/vnd.android.package-archive".toMediaType())                                    // Biến filePart bây giờ chứa toàn bộ thông tin cần thiết để gửi tệp APK như một phần của yêu cầu multipart
                                    val filePart = MultipartBody.Part.createFormData("apk", searching, requestBody)
                                    val userIdPart = userId.toRequestBody("text/plain".toMediaType())

                                    // Run network call on IO dispatcher
                                    val response = withContext(Dispatchers.IO) {
                                        RetrofitClient.apiService.uploadApk(filePart, userIdPart).execute()
                                    }

                                    if (response.isSuccessful) {
                                        Log.d("Upload", "Success: ${response.body()?.message}, FilePath: ${response.body()?.filePath}")
                                        uploadStatus = "Upload successful: ${response.body()?.message}"
                                        val intent = Intent(context, AnalyzerActivity::class.java).apply {
                                            putExtra("APK_URI", selectedUri.toString())
                                            putExtra("SERVER_FILE_PATH", response.body()?.filePath)
                                        }
                                        context.startActivity(intent)
                                    } else {
                                        Log.e("Upload", "Failed: ${response.message()}, Code: ${response.code()}")
                                        uploadStatus = "Upload failed: ${response.message()}"
                                    }
                                } catch (e: Exception) {
                                    Log.e("Upload", "Upload failed", e) // Log the full stack trace
                                    uploadStatus = "Upload error: ${e.javaClass.simpleName} - ${e.message ?: "Unknown error"}"
                                }
                            }
                        } else {
                            Toast.makeText(context, "Please select an APK file", Toast.LENGTH_SHORT).show()
                        }
                    },
                    modifier = Modifier
                        .padding(16.dp)
                        .background(
                            color = colorResource(id = R.color.text_color),
                            shape = RoundedCornerShape(8.dp)
                        )
                        .border(
                            width = 3.dp,
                            color = colorResource(id = R.color.white),
                            shape = RoundedCornerShape(8.dp)
                        ),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color.Transparent, // tránh chồng màu
                        contentColor = colorResource(id = R.color.white)
                    ),
                    shape = RoundedCornerShape(8.dp)
                ) {
                    Text("Scan", fontSize = 20.sp)
                }
            }
            Spacer(modifier = Modifier.height(10.dp))
            // Display upload status
            uploadStatus?.let {
                Text(
                    text = it,
                    color = if (it.startsWith("Upload successful")) Color.Green else Color.Red,
                    fontSize = 16.sp
                )
            }
            Spacer(modifier = Modifier.weight(0.5f))
        }
    }
}

@Composable
fun ProfileContentScreen() {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
            .background(colorResource(id = R.color.background))
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text("Profile Screen")
    }
}