package com.example.malwaredetectionapp

import android.content.Intent
import android.os.Bundle
import android.widget.Button
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import com.example.malwaredetectionapp.ui.theme.MalwareDetectionAppTheme
import androidx.compose.ui.viewinterop.AndroidView

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.colorResource
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.LinkAnnotation
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.foundation.text.ClickableText
import androidx.compose.foundation.verticalScroll
import androidx.compose.ui.platform.LocalContext

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MalwareDetectionAppTheme {
                LoginScreen()
            }
        }
    }
}

@Preview
@Composable
fun LoginScreenPreview() {
    LoginScreen()
}

@Composable
fun LoginScreen() {
    var username by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
            .background(colorResource(id = R.color.background))
            .padding(
                start = 40.dp,
                end = 40.dp,
                top = 75.dp,
                bottom = 30.dp
            ),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        // Logo
        Image(
            painter = painterResource(id = R.drawable.logo),
            contentDescription = "Logo",
            modifier = Modifier.size(100.dp)
        )
        Spacer(modifier = Modifier.weight(0.75f))
        // Username field
        Text(
            "Name",
            color = Color.White,
            fontSize = 18.sp,
            modifier = Modifier.align(Alignment.Start)
        )
        TextField(
            value = username,
            onValueChange = { username = it },
            modifier = Modifier
                .fillMaxWidth()
                .defaultMinSize(minHeight = 60.dp)
                .background(
                    color = colorResource(id = R.color.background),
                    shape = RoundedCornerShape(8.dp)
                )
                .border(
                    width = 3.dp,
                    color = colorResource(id = R.color.white),
                    shape = RoundedCornerShape(8.dp)
                ),
            colors = TextFieldDefaults.colors(
                focusedTextColor = colorResource(id = R.color.white),
                unfocusedTextColor = colorResource(id = R.color.white),
                cursorColor = colorResource(id = R.color.white),
                focusedContainerColor = Color.Transparent, // Xóa màu nền mặc định khi focus
                unfocusedContainerColor = Color.Transparent // Xóa màu nền mặc định khi không focus
            ),
            textStyle = LocalTextStyle.current.copy(fontSize = 16.sp),
            singleLine = true
        )
        Spacer(modifier = Modifier.height(20.dp))
        // Password field
        Text(
            "Password",
            color = Color.White,
            fontSize = 18.sp,
            modifier = Modifier.align(Alignment.Start)
        )
        TextField(
            value = password,
            onValueChange = { password = it },
            modifier = Modifier
                .fillMaxWidth()
                .defaultMinSize(minHeight = 60.dp)
                .background(
                    color = colorResource(id = R.color.background),
                    shape = RoundedCornerShape(8.dp)
                )
                .border(
                    width = 3.dp,
                    color = colorResource(id=R.color.white),
                    shape = RoundedCornerShape(8.dp)
                ),
            visualTransformation = PasswordVisualTransformation(),
            colors = TextFieldDefaults.colors(
                focusedTextColor = Color.White,
                unfocusedTextColor = Color.White,
                cursorColor = Color.White,
                focusedContainerColor = Color.Transparent, // Xóa màu nền mặc định khi focus
                unfocusedContainerColor = Color.Transparent // Xóa màu nền mặc định khi không focus
            ),
            singleLine = true
        )
        Spacer(modifier = Modifier.height(10.dp))
        // Forgot password
        Text(
            text = "Forgot Password?",
            color = colorResource(id = R.color.text_color),
            fontSize = 16.sp,
            modifier = Modifier.align(Alignment.End)
        )
        Spacer(modifier = Modifier.weight(1f))
        // Login button
        Button(
            onClick = {
                if (username.isNotEmpty() && password.isNotEmpty()) {
                    // Handle login
                }
            },
            modifier = Modifier
                .padding(16.dp)
                // Tạo viền
                .border(
                    width = 3.dp,
                    color = colorResource(id = R.color.white),
                    shape = RoundedCornerShape(8.dp)
                ),
            colors = ButtonDefaults.buttonColors(
                containerColor = colorResource(id = R.color.background),
                contentColor = colorResource(id = R.color.white)
            ),
            // Tạo nút bo góc 8dp
            shape = RoundedCornerShape(8.dp)
        ) {
            Text("Login", fontSize = 20.sp, color = colorResource(id = R.color.white))
        }
        Spacer(modifier = Modifier.weight(1f))
        // Have account text
        Row(
            horizontalArrangement = Arrangement.Center,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = "Don't have an account? ",
                color = Color.White,
                fontSize = 16.sp
            )

            val context = LocalContext.current
            Text(
                text = "Register Now",
                color = colorResource(id = R.color.text_color),
                fontSize = 16.sp,
                modifier = Modifier.clickable {
                    context.startActivity(Intent(context, RegisterActivity::class.java))
                }
            )
        }
    }
}
