package com.example.malwaredetectionapp

import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.ColumnScope
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.defaultMinSize
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.LocalTextStyle
import androidx.compose.material3.OutlinedTextFieldDefaults
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.colorResource
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.malwaredetectionapp.ui.theme.MalwareDetectionAppTheme
import com.example.malwaredetectionapp.DashboardActivity

class RegisterActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MalwareDetectionAppTheme {
                RegisterScreen()
            }
        }
    }
}

@Preview
@Composable
fun RegisterScreenPreview() {
    RegisterScreen()
}

@Composable
fun RegisterScreen() {
    var username by remember { mutableStateOf("") }
    var email by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }
    var repassword by remember { mutableStateOf("") }
    val context = LocalContext.current
    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
            .background(colorResource(id = R.color.background))
            .padding(
                start = 40.dp,
                end = 40.dp,
                top = 75.dp,
                bottom = 30.dp
            ),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Image(
            painter = painterResource(id = R.drawable.logo),
            contentDescription = "Logo",
            modifier = Modifier.size(100.dp)
        )
        Spacer(modifier = Modifier.weight(0.5f))
        Text(
            "Username",
            color = Color.White,
            fontSize = 18.sp,
            modifier = Modifier.align(Alignment.Start)
        )
        TextField(
            value = username,
            onValueChange = { username = it },
            modifier = Modifier
                .fillMaxWidth()
                .defaultMinSize(minHeight = 60.dp)
                .background(
                    color = colorResource(id = R.color.background),
                    shape = RoundedCornerShape(8.dp)
                )
                .border(
                    width = 3.dp,
                    color = colorResource(id = R.color.white),
                    shape = RoundedCornerShape(8.dp)
                ),
            colors = TextFieldDefaults.colors(
                focusedTextColor = colorResource(id = R.color.white),
                unfocusedTextColor = colorResource(id = R.color.white),
                cursorColor = colorResource(id = R.color.white),
                focusedContainerColor = Color.Transparent, // Xóa màu nền mặc định khi focus
                unfocusedContainerColor = Color.Transparent // Xóa màu nền mặc định khi không focus
            ),
            textStyle = LocalTextStyle.current.copy(fontSize = 16.sp),
            singleLine = true
        )
        Spacer(modifier = Modifier.height(10.dp))
        // Email
        Text(
            "Email",
            color = Color.White,
            fontSize = 18.sp,
            modifier = Modifier.align(Alignment.Start)
        )
        TextField(
            value = email,
            onValueChange = { email = it },
            modifier = Modifier
                .fillMaxWidth()
                .defaultMinSize(minHeight = 60.dp)
                .background(
                    color = colorResource(id = R.color.background),
                    shape = RoundedCornerShape(8.dp)
                )
                .border(
                    width = 3.dp,
                    color = colorResource(id = R.color.white),
                    shape = RoundedCornerShape(8.dp)
                ),
            colors = TextFieldDefaults.colors(
                focusedTextColor = colorResource(id = R.color.white),
                unfocusedTextColor = colorResource(id = R.color.white),
                cursorColor = colorResource(id = R.color.white),
                focusedContainerColor = Color.Transparent, // Xóa màu nền mặc định khi focus
                unfocusedContainerColor = Color.Transparent // Xóa màu nền mặc định khi không focus
            ),
            textStyle = LocalTextStyle.current.copy(fontSize = 16.sp),
            singleLine = true
        )
        Spacer(modifier = Modifier.height(10.dp))
        //Password
        Text(
            "Password",
            color = Color.White,
            fontSize = 18.sp,
            modifier = Modifier.align(Alignment.Start)
        )
        TextField(
            value = password,
            onValueChange = { password = it },
            modifier = Modifier
                .fillMaxWidth()
                .defaultMinSize(minHeight = 60.dp)
                .background(
                    color = colorResource(id = R.color.background),
                    shape = RoundedCornerShape(8.dp)
                )
                .border(
                    width = 3.dp,
                    color = colorResource(id = R.color.white),
                    shape = RoundedCornerShape(8.dp)
                ),
            colors = TextFieldDefaults.colors(
                focusedTextColor = colorResource(id = R.color.white),
                unfocusedTextColor = colorResource(id = R.color.white),
                cursorColor = colorResource(id = R.color.white),
                focusedContainerColor = Color.Transparent, // Xóa màu nền mặc định khi focus
                unfocusedContainerColor = Color.Transparent // Xóa màu nền mặc định khi không focus
            ),
            textStyle = LocalTextStyle.current.copy(fontSize = 16.sp),
            singleLine = true
        )
        Spacer(modifier = Modifier.height(10.dp))
        // Repassword
        Text(
            "Confirm Password",
            color = Color.White,
            fontSize = 18.sp,
            modifier = Modifier.align(Alignment.Start)
        )
        TextField(
            value = repassword,
            onValueChange = { repassword = it },
            modifier = Modifier
                .fillMaxWidth()
                .defaultMinSize(minHeight = 60.dp)
                .background(
                    color = colorResource(id = R.color.background),
                    shape = RoundedCornerShape(8.dp)
                )
                .border(
                    width = 3.dp,
                    color = colorResource(id = R.color.white),
                    shape = RoundedCornerShape(8.dp)
                ),
            colors = TextFieldDefaults.colors(
                focusedTextColor = colorResource(id = R.color.white),
                unfocusedTextColor = colorResource(id = R.color.white),
                cursorColor = colorResource(id = R.color.white),
                focusedContainerColor = Color.Transparent, // Xóa màu nền mặc định khi focus
                unfocusedContainerColor = Color.Transparent // Xóa màu nền mặc định khi không focus
            ),
            textStyle = LocalTextStyle.current.copy(fontSize = 16.sp),
            singleLine = true
        )
        Spacer(modifier = Modifier.height(10.dp))
        Button(
            onClick = {
                if (username.isNotEmpty() && password.isNotEmpty()) {
                    val intent = Intent(context, DashboardActivity::class.java)
                    context.startActivity(intent)
                }
            },
            modifier = Modifier
                .padding(16.dp)
                .border(
                    width = 3.dp,
                    color = colorResource(id = R.color.white),
                    shape = RoundedCornerShape(8.dp)
                ),
            colors = ButtonDefaults.buttonColors(
                containerColor = colorResource(id = R.color.background),
                contentColor = colorResource(id = R.color.white)
            ),
            shape = RoundedCornerShape(8.dp)
        ) {
            Text("Register", fontSize = 20.sp, color = colorResource(id = R.color.white))
        }
        Spacer(modifier = Modifier.weight(1f))
        Row(
            horizontalArrangement = Arrangement.Center,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = "Already have an account? ",
                color = Color.White,
                fontSize = 16.sp
            )
            Text(
                text = "Log In",
                color = colorResource(id = R.color.text_color),
                fontSize = 16.sp,
                modifier = Modifier.clickable {
                    context.startActivity(Intent(context, MainActivity::class.java))
                }
            )
        }
    }
}

